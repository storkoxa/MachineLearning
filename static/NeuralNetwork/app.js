var myCanvas
var file = "data2.txt"
var data;

var iterations = 200;
var alpha = 1;
var lambda = 1;
var allTheta = null;

function setup() {
	myCanvas = createCanvas(500, 500);
 	myCanvas.parent("canvas");
 	rectMode(CENTER);
 	background(0);
}

function draw() {
  stroke(255);
  strokeWeight(60);  
  if (mouseIsPressed === true) {
    line(mouseX, mouseY, pmouseX, pmouseY);
  }
}

function mousePressed() {
	  av = createImage(20, 20);
	  av.filter(GRAY);
  	  av.loadPixels();
  	  console.log(av)
  	  console.log(av.pixels)
  	  test = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3.0637254901960855e-06 -2.1095756389873987e-05 -0.00015012254901960786 -0.00015257352941176468 -0.00010600490196078424 6.4338235294117455e-06 0 0 0 0 3.0637254901960406e-06 -0.00013330072153601571 -8.7316176470588361e-05 7.6593137254901706e-06 0 0 0 0 0 6.2223283896478954e-18 0.00087503404139432559 -0.0095296767355596019 -0.046601647603486625 -0.051763225081700018 -0.033662871051199049 -0.0039639331427019824 4.4586441645245396e-05 4.6806917211335283e-05 9.8001672136948607e-18 0.00044679330065353838 -0.0041333061002183516 -0.043579229682171684 -0.027185202205882723 0.0024003438180828108 0 0 0 0 0.00014399509803921605 -0.00045496323529414567 -0.021302764161220105 0.093009338524043861 0.54464886301742854 0.60743503199890991 0.37998793232570727 0.028179704520696895 -0.0017633300721536537 -0.00020714188453159108 -0.00030841503267973818 -0.017809095860566487 0.027050483387799456 0.50469713491772261 0.32016118600217874 -0.028231379357298352 0 0 0 2.5681790387673856e-05 -9.0192001956697397e-05 -0.012863010068893082 0.069826630929571365 0.7313758288443386 0.84629164798282519 0.69831745206745266 0.96390534765534874 0.62067880097291817 0.035548977826096242 -0.0096021021021021006 -0.036031042354572003 0.1306154457625042 0.68595039609745567 0.9296101644395649 0.3345392054950887 -0.03085339298574585 0 0 0 -3.1556372549029001e-05 -0.017250663807189454 0.11506335103485885 0.74836967252178599 0.67446063144592516 0.072997446895424326 -0.024400428921568535 0.702442146650328 0.80738351034858291 0.058196975255798609 -0.036653935185184422 0.23267648760893339 0.81422206903594752 0.75327267156862632 0.17729135243841046 -0.02246663943355132 0.00098720043572985685 0 0 0 -0.0024434232026144739 -0.0075500578703703129 0.5836151790577353 0.76207540168845256 0.084165171959289228 -0.037445380582788373 0.0081281828703707211 0.77267063248910806 0.63199053649237358 0.031261363173127436 0.38621561819172101 0.87710425177015239 0.63005009191176453 0.093161203022875616 -0.028017916106151466 0.00019846132897602853 0 0 0 0 -0.016843392565359779 0.25388861655773398 0.8377799223856216 0.15249630650871432 -0.056218101585749629 0.073735736655773765 0.38117762799564298 0.83549868940631788 0.47291768790849653 0.68727980242686226 0.91545261437908554 0.41731590413943304 -0.0079219260620916471 -0.016194801879084838 0.00049957197016021852 7.9656862745098355e-05 0 0 0 0 -0.036197406045752077 0.63192425789760354 0.54348793232570725 -0.00095431644880088901 0.32748192762898709 0.56479796432461937 0.80781461056644899 0.92563602941176459 0.92185860906862793 0.81818605370075903 0.22807809095860537 -0.022467507489106475 -0.0056217830882350859 2.4662990196076543e-05 2.5681790387671226e-05 0 0 0 0 0 -0.042546420855244911 0.72568360781596075 0.73040385974209454 0.6661313915725684 0.78355668770246256 0.70866024961613217 1.0128050901580314 0.98554375076433975 0.66208949900126335 0.094219703000428798 -0.034329912491677474 -0.00093499042028454406 0.00030818148465207556 0 0 0 0 0 0 0 -0.018490757761438215 0.28337830201525088 0.71844299768518605 0.56942408769063224 0.59629431467666694 0.9406406760620909 0.77133843954248404 0.31164081222766926 0.022732689950980645 -0.018945076298017564 -0.00011999591503268675 4.6806917211328975e-05 0 0 0 0 0 0 0 0 0.0011212214052287589 -0.023079163262527149 0.033232009123093417 -0.0053203976034859922 0.51810787031375249 0.45109380106209063 0.075805759803921416 -0.035101068899782074 -0.0043602941176470109 0.00058089763972117255 0 0 0 0 0 0 0 0 0 0 5.7904411764707868e-05 -0.00031158088235294038 -0.009799138752723327 -0.0053270867374727703 0.0014383161441986758 -0.017742885348583769 -0.015427066312636149 0.00036335784313725947 5.7904411764701939e-05 0 0 0 0 0 0 0 0 0 0 0 0 0 1.2765522875834691e-06 3.5488153594769908e-05 -0.0025355672414494237 -0.0015525939542482587 3.5794526143788195e-05 1.0110294117646379e-05 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0";
  	  number = test.split(" ");
  	  
  	  number.forEach((pixel, index) => {
  	   av.set(Math.trunc(index/20), index % 20, pixel * 255)
  	  })
  	  av.updatePixels();
  	  image(av, 0, 0)



}


function hideBarShowStatus(hideBar) {
	if (hideBar) {
		$("#progress").hide();
		$("#results").show();
	} else {
		$("#progress").show();
		$("#results").hide();		
	}
}





function updateBar(percent, text = "") {
	$("#progressBar").width(percent + "%")
	$("#progressBar").text(percent + "%" + " " + text)
	$("#progressBar").attr("aria-valuenow", percent)
}


function wait(ms) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Done waiting");
      resolve(ms)
    }, ms )
  })
}  



async function loadFileIntoMemory(callback) {
	$.ajax({
	  xhr: function()
	  {
	    var xhr = new window.XMLHttpRequest();
	    xhr.addEventListener("progress", function(evt){
	      if (evt.lengthComputable) {
	        updateBar(parseInt(evt.loaded * 5 / evt.total) , "Downloading Data")
	      }
	    }, false);
	    return xhr;
	  },
	  type: 'GET',
	  url: file,
	  data: {},
	  success: function(response){


	  		datax = response.split("\n")
	  		total = datax.length;
	  		s = ""
	  		console.log(total)
			datax.forEach((line, index) => {  
		
		    	s += "[" + line.split(" ").toString() + "]" + ((index == (total -1))?"":",");
				updateBar(5 + parseInt(index * 10 / total) , "Parsing Data")
				wait(100)       	
			});
			data = math.matrix(JSON.parse("["+s+"]"));
			callback();
	  }
	});
}


function processML() {

        y = ml.getYCol(data)
        X = ml.getXMatrix(data)
        X_1 = ml.addInterceptTerm(X)	
        allTheta = ml.oneVsAll(X, y, 0.1, 5, function(percent) {
        	updateBar(15 + (percent * 100 / 85));
        })
        console.table(allTheta.toArray())
        hideBarShowStatus(true)


}


async function learn() {
	hideBarShowStatus(false)
	loadFileIntoMemory(processML);


}




$(document).ready(function() {

	learn()


    $("#clear").click(function(){
 		background(0);
    })

	$("#predict").click(function(){
 		 img = myCanvas.get()
 		 img.resize(20, 20)
 		 img.loadPixels()
 		 img.filter(GRAY);
  		console.log(img.canvas.toDataURL());
 		 $("#predImg").attr('src', img.canvas.toDataURL());
    })
});